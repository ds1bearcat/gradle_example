/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {// replaces reply section in older builds
    // Apply the application plugin to add support for building a CLI application in Java.
    application     // could also use id("application")

    id("org.barfuin.gradle.taskinfo") version "2.1.0"

}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    //implementation(project(mapOf("path" to ":")))
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.1")

    // This dependency is used by the application.
    implementation(project(":model"))
    implementation("com.google.guava:guava:31.1-jre")
    implementation("com.google.http-client:google-http-client:1.41.8")

}

application {
    // Define the main class for the application.
    mainClass.set("com.gradle.lab.App")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.register<Zip>("zipTestResult2"){
    group = "distribution"
    description = "Archives test results"

    //dependsOn("test")
    //from(layout.buildDirectory.dir("tmp"))
    from(tasks.named("test")) {include("**/*.xml")}

    val zipName = providers.gradleProperty("zipName").orElse("test-results.zip")
    archiveFileName.set(zipName)
    destinationDirectory.set(layout.buildDirectory)

    doLast{
        println("zipping action")
    }
}


tasks.register("testWithMsg"){
    group = "verification"
    description = "Test with Message Output"

    dependsOn("test")

    doLast {
        println("Test Done!")
    }
}

tasks.register("msgAfterTest"){
    group = "verification"
    description = "Print msg when tests are done"

    doLast {
        println("Tests Done!!")
    }
}

tasks.named("test") {
    finalizedBy("msgAfterTest")
}

tasks.register<Copy>("backupTestXml") {
    from("build/test-results/test")
    into("/tmp/")

    exclude("binary/**")

    doLast {
        println("backup Test Succeeded")
    }

}